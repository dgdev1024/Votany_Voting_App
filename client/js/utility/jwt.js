///
/// \file   jwt.js
/// \brief  Functions for getting, setting, and clearing the login token.
///

// Imports
import {Base64 as B64} from "js-base64";

// The name of the key in local storage containing our login token.
const LoginTokenKey = "-dwg-votany-login";

///
/// \fn     getLoginToken
/// \brief  Gets the login token stored in the browser's local storage.
///
/// \return The login token's credentials, as well as its raw string.
///
export function getLoginToken () {
    // Get the raw token from the local storage.
    const rawToken = localStorage.getItem(LoginTokenKey);

    // Check to see if the token could be found.
    if (!rawToken) { return null; }

    // Decode and parse the token.
    const decoded = JSON.parse(B64.decode(rawToken.split(".")[1]));

    // Check to see if a screen name exists in the token.
    if (!decoded.screenName) { 
        clearLoginToken();
        return null; 
    }

    // Check to see if the token has expired.
    if (!decoded.exp || decoded.exp <= Date.now() / 1000) {
        clearLoginToken();
        return null;
    }

    // Return our token.
    return {
        screenName: decoded.screenName,
        rawToken: rawToken
    };
}

///
/// \fn     saveLoginToken
/// \brief  Saves a new JWT token retrieved from the server.
///
/// \param  token           The JWT token generated by the server.
///
export function saveLoginToken (token) {
    localStorage.setItem(LoginTokenKey, token);
}

///
/// \fn     clearLoginToken
/// \brief  Clears the login token.
///
export function clearLoginToken () {
    localStorage.removeItem(LoginTokenKey);
}